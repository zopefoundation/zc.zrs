ZRS Secondary Storages
======================

ZRS Secondary storages are "read-only" storages that get their data by
downloading data from ZRS primary storages.  They manage downlaoded
data by "wrapping" other storages.

In this demonstration, we'll create a file storage to hold our
secondary data:

    >>> import ZODB.FileStorage
    >>> fs = ZODB.FileStorage.FileStorage('Data.fs')

To create a secondary storage, we supply:

- The underlying storage

- The address to connect to, and

- An optional Twisted reactor to register with.  Normally, ZRS manages
  it's own reactor, but for demonstration/test purposes, we can pass
  in a special reactor that lets us demonstrate primary
  storages without actually creating network connections.

Let's create a secondary storage:

    >>> import zc.zrs.secondary
    >>> ss = zc.zrs.secondary.Secondary(fs, ('', 8000), reactor)
    INFO zc.zrs.secondary:
    Opening Data.fs ('', 8000)
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory>

We can't use a secondary storage until it has gotten some data.  Our
demo reactor doesn't make any network connections, so of course, the
storage doesn't have any data yet.  The demo reactor simulates
connections by creatiing client connections when we call accept.
Let's accept the connection, getting the client connection created for
this server:

    >>> connection = reactor.accept()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47245): Connected

The secondary server writes two messages to the connection to begin
the interaction with the server.  The first is the ZRS protocol
identifier:

    >>> connection.read()
    b'zrs2.0'

The second message is the identifier of the last transaction seen by
the client.  This client doesn't have any data, so we'll get a
transaction id consisting of all zeros:

    >>> connection.read()
    b'\x00\x00\x00\x00\x00\x00\x00\x00'

This is all the data sent by the client.  From this point on, the
client passively waits for data sent by the server.  We'll pass it
some data.  To do this, we'll get some help from a file-storage
iterator that will give us the data we need to send.  We'll create a
file storage and database that we can use for this:

    >>> primary_fs = ZODB.FileStorage.FileStorage('primary.fs')
    >>> import zc.zrs.primary
    >>> primary_data = zc.zrs.primary.FileStorageIterator(primary_fs)

    >>> from ZODB.DB import DB
    >>> primary_db = DB(primary_fs)

The first transaction initializes the database.  Let's send that to
the secondary.

    >>> trans = primary_data.next()

Transactions are sent as a series of messages.  To make this easier
for this demonstration, the test connections let us pass data directly.

The replication protocol includes md5 checksums to make sure data are
recieved correctly.  The test connection also keeps track of md5
checksums for us, but we have to initialize the checksum with the
last transaction:

    >>> connection.init_md5(b'\x00\x00\x00\x00\x00\x00\x00\x00')

(We could actually skip this in this case, as the test connection
initializes itself with a zero transaction id.  We won't be able to
skip it below when we use non-zero transaction ids.)

The first message is a transaction message that starts the transaction
and includes transaction meta data.

    >>> connection.send(('T', (trans.tid, trans.status, trans.user,
    ...                        trans.description, trans._extension)))

This initial message is followed by a serious of messages, two for
each object store. The first has record meta data as a pickle, and the
second has the record data:

    >>> for record in trans:
    ...     connection.send(('S', (record.oid, record.tid, record.version,
    ...                            record.data_txn)))
    ...     connection.send(record.data, raw=True)

Finally, a commit message is sent marking the end of the transaction:

    >>> connection.send(('C', (connection.md5.digest(),)))

Now that we've created this minimal data, we can create a database for
our secondary storage:

    >>> db = DB(ss)
    >>> conn = db.open()
    >>> conn.root()
    {}

Let's send some more data.

    >>> primary_conn = primary_db.open()
    >>> ob = primary_conn.root()
    >>> import persistent.mapping
    >>> ob['x'] = persistent.mapping.PersistentMapping()
    >>> commit()

    >>> trans = primary_data.next()
    >>> connection.send(('T', (trans.tid, trans.status, trans.user,
    ...                        trans.description, trans._extension)))
    >>> for record in trans:
    ...     connection.send(('S', (record.oid, record.tid, record.version,
    ...                            record.data_txn)))
    ...     connection.send(record.data, raw=True)
    >>> connection.send(('C', (connection.md5.digest(),)))

We'll see the data in the secondary database, and on the secondary
connection, after a sync:

    >>> conn.sync()
    >>> conn.root()
    {'x': {}}

If we undo the transaction in the primary data:

    >>> primary_db.undo(primary_fs.undoLog()[0]['id'])
    >>> commit()

    >>> trans = primary_data.next()
    >>> connection.send(('T', (trans.tid, trans.status, trans.user,
    ...                        trans.description, trans._extension)))
    >>> for record in trans:
    ...     connection.send(('S', (record.oid, record.tid, record.version,
    ...                            record.data_txn)))
    ...     connection.send(record.data, raw=True)
    >>> connection.send(('C', (connection.md5.digest(),)))

Then, as we expect, the data will be undone on the secondary:

    >>> conn.sync()
    >>> conn.root()
    {}

Keep alive
----------

Secondary storages can send keep-alive messages to primaries.  This
can help in flaky network configurations in which connections are
dropped in odd ways after periods of inactivity.

.. keep alives aren't enabled by default

    >>> reactor.later
    []

To enable keep alives, pass a positive keep alive delay, in seconds,
to the secondary constructor.

    >>> ss.close() # doctest: +NORMALIZE_WHITESPACE
    INFO zc.zrs.secondary:
    Closing Data.fs ('', 8000)
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47245):
       Disconnected <twisted.python.failure.Failure
       twisted.internet.error.ConnectionDone: Connection was closed cleanly.>

    >>> fs = ZODB.FileStorage.FileStorage('Data.fs')
    >>> ss = zc.zrs.secondary.Secondary(fs, ('', 8000), reactor,
    ...                                 keep_alive_delay=60)
    INFO zc.zrs.secondary:
    Opening Data.fs ('', 8000)
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory instance at 0xb6d65e0c>

    >>> db = DB(ss)
    >>> conn = db.open()

    >>> connection = reactor.accept()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47246): Connected

    >>> connection.read()
    b'zrs2.0'

    >>> connection.read()
    b'\x03lk\x90\xfb\xbb\xbb\xbb'

The secondary periodically sends a keep-alive message to the primary.
It does this by scheduling a method with the reactor. Let's look at
the test reactor's queue of things to do later:

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<1 60 keep_alive () {}>]

Here we see the first entry is the keep alive. Let's tell the reactor
to flush it's qeueue

    >>> reactor.doLater()

Now an empty strings has been semd to the primary:

    >>> connection.read()
    b''

And a new keep alive has been scheduled:

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<2 60 keep_alive () {}>]

Connection Failures
-------------------

If a connection fails, then the secondary storage will disconnect and
and ask the reactor to reconnect 60 seconds later.  We'll demonstrate
this by asking our test conection to fail:

    >>> connection.fail()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47246): Disconnected 'failed'
    INFO zc.zrs.reactor:
    Stopping factory <zc.zrs.secondary.SecondaryFactory>

Our test reactor just queues later attempts:

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<3 60 connect () {}>]

Note that our keep alive job has disappeared. This is because the keep
alive is removed when a secondary is disconnected.

We'll simulate calling these later:

    >>> reactor.doLater()
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory>

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    []

We still see the keep alive because it rescheduled itself.

This causes a connection to be attempted, which we'll accept:

    >>> connection = reactor.accept()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47247): Connected

The secondary will send the protocol and a transaction, as before:

    >>> connection.read()
    b'zrs2.0'

    >>> tid = connection.read()
    >>> tid
    b'\x03lk\x90\xfb\xbb\xbb\xbb'

    >>> connection.init_md5(tid)

Note that the transaction id isn't zero.  It fact, it's the same as
the last transaction that was sent to the secondary:

    >>> tid == trans.tid
    True

Let's create a new transaction.

    >>> ob['y'] = persistent.mapping.PersistentMapping()
    >>> commit()

We'll send some of the data but not the final commit record to the secondary
and then break the connection:

    >>> newtrans = primary_data.next()
    >>> connection.send(('T', (newtrans.tid, newtrans.status, newtrans.user,
    ...                        newtrans.description, newtrans._extension)))
    >>> record = newtrans.next()
    >>> connection.send(('S', (record.oid, record.tid, record.version,
    ...                        record.data_txn)))
    >>> connection.send(record.data, raw=True)

    >>> connection.fail()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47247): Disconnected 'failed'
    INFO zc.zrs.reactor:
    Stopping factory <zc.zrs.secondary.SecondaryFactory>

The secondary still shows the old data:

    >>> conn.sync()
    >>> conn.root()
    {}

Again, the secondary attempts to reconnect.  We'll accept the new connection.

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<5 60 connect () {}>]

The reason the record increased from 3 to 5 is that a keep-alive
record was added, but then removed when we disconnected.

    >>> reactor.doLater()
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory>

    >>> reactor.later
    []

    >>> connection = reactor.accept()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47248): Connected

    >>> connection.read()
    b'zrs2.0'

    >>> connection.read() == trans.tid
    True

    >>> connection.init_md5(trans.tid)


Again, the transaction id sent is the earlier transaction, which is
the last transaction committed by the secondary.

We'll send the new data and this time send the commit record:

    >>> connection.send(('T', (newtrans.tid, newtrans.status, newtrans.user,
    ...                        newtrans.description, newtrans._extension)))
    >>> connection.send(('S', (record.oid, record.tid, record.version,
    ...                        record.data_txn)))
    >>> connection.send(record.data, raw=True)

    >>> record = newtrans.next()

    >>> connection.send(('S', (record.oid, record.tid, record.version,
    ...                        record.data_txn)))
    >>> connection.send(record.data, raw=True)

    >>> connection.send(('C', (connection.md5.digest(),)))

Now we see the new data:

    >>> conn.sync()
    >>> conn.root()
    {'y': {}}

So far we've seen the effect of breaking successful connections.
Secondaries also try to reconnect if connections are rejected.  We'll
again break the connection, but this time we'll reject the connection
attempt:

    >>> connection.fail()
    INFO zc.zrs.secondary:
    IPv4Address(TCP, '127.0.0.1', 47248): Disconnected 'failed'
    INFO zc.zrs.reactor:
    Stopping factory <zc.zrs.secondary.SecondaryFactory>

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<7 60 connect () {}>]

    >>> reactor.doLater()
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory>

    >>> reactor.later
    []

    >>> connection = reactor.reject()
    INFO zc.zrs.reactor:
    Stopping factory <zc.zrs.secondary.SecondaryFactory>

As with failed connections, the secondary just tries again, waiting a
minute between attempts.

    >>> reactor.later # doctest: +NORMALIZE_WHITESPACE
    [<8 60 connect () {}>]

.. cleanup

    >>> primary_db.close()
    >>> db.close() # doctest: +NORMALIZE_WHITESPACE
    INFO zc.zrs.secondary:
    Closing Data.fs ('', 8000)

    >>> reactor.doLater()
    INFO zc.zrs.reactor:
    Starting factory <zc.zrs.secondary.SecondaryFactory>
    INFO zc.zrs.reactor:
    Stopping factory <zc.zrs.secondary.SecondaryFactory>

    >>> reactor.later
    []

    Because we closed the secondary, the connector doesn't try to connect:

    >>> reactor.clients
    []
